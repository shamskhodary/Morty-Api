import Head from "next/head";
import { useState } from "react";
import axios from "@/axios.config";
import fetch from "axios";
import styles from "@/styles/Home.module.css";
import Link from "next/link";
import "../node_modules/font-awesome/css/font-awesome.min.css";
import { useRouter } from "next/router";

export default function Home({ data, next, prev }) {
  const [apiData, setApiData] = useState(data);
  const [searchInput, setSearchInput] = useState("");
  const router = useRouter();

  const checkStatus = (status) => {
    if (status === "Alive") {
      return styles.statusAlive;
    } else if (status === "Dead") {
      return styles.statusDead;
    } else {
      return styles.unknown;
    }
  };

  const handleChange = (e) => {
    setSearchInput(e.target.value);
  };

  const handleSearch = () => {
    if (searchInput.length > 0) {
      const filteredData = apiData.filter((e) =>
        e.name.toLowerCase().includes(searchInput.toLowerCase())
      );
      setApiData(filteredData);
    } else {
      setApiData(data);
    }
  };

  const handleLoadMore = (val) => {
    const page = +router.query.page || 1;
    const query = { ...router.query };

    if (val === "next") {
      query.page = page + 1;
      fetch
        .get(next)
        .then((ele) => {
          const info = Array.from({ length: 10 }).map(async (_, i) => {
            const res = ele.data.results[i];
            const episode = await fetch.get(res.episode[0]);

            return { ...res, firstSeen: episode.data };
          });
          const result = Promise.all(info);
          return result;
        })
        .then((e) => setApiData(e.slice(0, 10)));
    } else if (val === "prev" && prev !== null) {
      query.page = page - 1;
      fetch
        .get(prev)
        .then((ele) => {
          const info = Array.from({ length: 10 }).map(async (_, i) => {
            const res = ele.data.results[i];
            const episode = await fetch.get(res.episode[0]);

            return { ...res, firstSeen: episode.data };
          });
          const result = Promise.all(info);
          return result;
        })
        .then((e) => setApiData(e.slice(0, 10)));
    } else {
      return;
    }
    router.push({
      pathname: router.pathname,
      query,
    });
  };

  return (
    <>
      <Head>
        <title>Rick & Morty</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.container}>
        <div className={styles.input_div}>
          <input
            type="text"
            placeholder="Search here..."
            onChange={handleChange}
            value={searchInput}
          />
          <button className={styles.search_button} onClick={handleSearch}>
            <i className="fa fa-search"></i>
          </button>
        </div>
        <div className={styles.container_content}>
          {" "}
          {apiData.map((e) => (
            <section className={styles.card} key={e.id}>
              <div>
                <img src={e.image} alt={e.name} />
              </div>
              <div className={styles.content}>
                <div className={styles.identity}>
                  <Link href={`/characters/${e.id}`}>
                    <h2>{e.name}</h2>
                  </Link>

                  <div>
                    <span className={checkStatus(e.status)}></span>
                    <span>
                      {e.status} - {e.species}
                    </span>
                  </div>
                </div>

                <div className={styles.identity}>
                  <span className={styles.spans}>Last known location:</span>
                  <span>{e.location.name}</span>
                </div>

                <div className={styles.identity}>
                  <span className={styles.spans}>First seen in:</span>
                  <span>{e.firstSeen.name}</span>
                </div>
              </div>
            </section>
          ))}
        </div>
        <div className={styles.paginate_btn}>
          <p onClick={() => handleLoadMore("prev")}>prev</p>
          <p onClick={() => handleLoadMore("next")}>next</p>
        </div>
      </main>
    </>
  );
}

export const getServerSideProps = async (context) => {
  const { page } = context.query;

  const response = await axios.get(`/character?page=${+page}`);
  const result = response.data.results;

  const allData = Array.from({ length: 10 }, async (_, i) => {
    const characterDetails = result[i];
    const episode = await axios.get(characterDetails.episode[0]);
    return { ...characterDetails, firstSeen: episode.data };
  });

  const next = response.data.info.next;
  const prev = response.data.info.prev;

  const output = await Promise.all(allData);

  return {
    props: {
      data: output,
      next,
      prev,
    },
  };
};
